/**
 * @file Este arquivo √© respons√°vel pela inicializa√ß√£o do Firebase Admin SDK.
 * A inicializa√ß√£o √© feita utilizando um padr√£o Singleton para garantir que o SDK
 * seja configurado apenas uma vez durante o ciclo de vida da aplica√ß√£o no servidor.
 *
 * Para simplificar a configura√ß√£o no ambiente de desenvolvimento, este script
 * l√™ as credenciais diretamente de um objeto JSON armazenado na vari√°vel de ambiente
 * `FIREBASE_SERVICE_ACCOUNT_KEY`.
 */

// Importa√ß√µes necess√°rias do Firebase Admin SDK.
import {
  initializeApp,
  getApps,
  App,
  cert,
  ServiceAccount,
} from 'firebase-admin/app';
import { getFirestore, Firestore } from 'firebase-admin/firestore';
import { getMessaging, Messaging } from 'firebase-admin/messaging';

// Defini√ß√£o de uma interface para agrupar os servi√ßos do Firebase.
interface FirebaseAdminServices {
  app: App;
  db: Firestore;
  messaging: Messaging;
}

// Vari√°vel para armazenar a inst√¢ncia √∫nica (Singleton) dos servi√ßos do Firebase.
let services: FirebaseAdminServices | null = null;

/**
 * Obt√©m as credenciais da conta de servi√ßo do Firebase a partir da vari√°vel de ambiente.
 *
 * @returns O objeto de credenciais (`ServiceAccount`) para inicializar o Firebase.
 * @throws Lan√ßa um erro cr√≠tico se a vari√°vel de ambiente n√£o for encontrada ou
 *         se o seu conte√∫do n√£o for um JSON v√°lido.
 */
function getServiceAccount(): ServiceAccount {
  // L√™ a chave em formato JSON diretamente da vari√°vel de ambiente.
  const jsonKey = process.env.FIREBASE_SERVICE_ACCOUNT_KEY;

  if (!jsonKey) {
    // Se a vari√°vel de ambiente n√£o estiver definida, a aplica√ß√£o n√£o pode continuar.
    throw new Error(
      'A credencial do Firebase n√£o foi encontrada. Por favor, defina a vari√°vel de ambiente `FIREBASE_SERVICE_ACCOUNT_KEY` com o conte√∫do do JSON da sua chave de servi√ßo.',
    );
  }

  console.log('üî• INFO: Credenciais do Firebase encontradas via FIREBASE_SERVICE_ACCOUNT_KEY.');

  try {
    // Tenta converter a string JSON para um objeto JavaScript.
    return JSON.parse(jsonKey) as ServiceAccount;
  } catch (error: any) {
    console.error(
      '‚ùå ERRO CR√çTICO: Falha ao analisar o JSON da chave de servi√ßo.',
      error.message,
    );
    // Este erro geralmente ocorre se o JSON estiver malformado (ex: v√≠rgula faltando).
    throw new Error(
      'O formato do conte√∫do em FIREBASE_SERVICE_ACCOUNT_KEY √© um JSON inv√°lido.',
    );
  }
}

/**
 * Inicializa o Firebase Admin SDK, garantindo que a inicializa√ß√£o ocorra apenas uma vez.
 *
 * @returns Um objeto contendo as inst√¢ncias dos servi√ßos `app`, `db` e `messaging`.
 */
function initializeFirebaseAdmin(): FirebaseAdminServices {
  // Se a inst√¢ncia j√° existe (padr√£o Singleton), retorna-a imediatamente.
  if (services) {
    return services;
  }

  // Medida de seguran√ßa extra: verifica se alguma app j√° foi inicializada fora deste fluxo.
  if (getApps().length > 0) {
    const app = getApps()[0];
    console.log('üî• INFO: Utilizando app Firebase Admin j√° inicializada.');
    services = {
      app,
      db: getFirestore(app),
      messaging: getMessaging(app),
    };
    return services;
  }

  console.log('üöÄ INFO: Inicializando o Firebase Admin SDK pela primeira vez...');

  try {
    // 1. Obter as credenciais.
    const serviceAccount = getServiceAccount();

    // 2. Inicializar o app Firebase com as credenciais.
    const app = initializeApp({
      credential: cert(serviceAccount),
    });

    console.log('‚úÖ SUCESSO: Firebase Admin SDK inicializado com sucesso.');

    // 3. Armazenar e retornar as inst√¢ncias dos servi√ßos.
    services = {
      app,
      db: getFirestore(app),
      messaging: getMessaging(app),
    };

    return services;
  } catch (error: any) {
    console.error('‚ùå FATAL: N√£o foi poss√≠vel inicializar o Firebase Admin SDK.', error);
    throw new Error(`Falha na inicializa√ß√£o do Firebase: ${error.message}`);
  }
}

// Executa a fun√ß√£o de inicializa√ß√£o e exporta as inst√¢ncias de `db` e `messaging`.
const { db, messaging } = initializeFirebaseAdmin();

export { db, messaging };
